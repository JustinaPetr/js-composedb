"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[474],{4852:(e,t,o)=>{o.d(t,{Zo:()=>p,kt:()=>d});var n=o(9231);function a(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function r(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function l(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){a(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,n,a=function(e,t){if(null==e)return{};var o,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||(a[o]=e[o]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):l(l({},t),e)),o},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var o=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(o),d=a,f=m["".concat(s,".").concat(d)]||m[d]||u[d]||r;return o?n.createElement(f,l(l({ref:t},p),{},{components:o})):n.createElement(f,l({ref:t},p))}));function d(e,t){var o=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=o.length,l=new Array(r);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<r;c++)l[c]=o[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,o)}m.displayName="MDXCreateElement"},4498:(e,t,o)=>{o.d(t,{Z:()=>l});var n=o(9231),a=o(9841);const r="tabItem_AZVv";function l(e){let{children:t,hidden:o,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,a.Z)(r,l),hidden:o},t)}},2830:(e,t,o)=>{o.d(t,{Z:()=>d});var n=o(4011),a=o(9231),r=o(9841),l=o(2964),i=o(3779),s=o(1764),c=o(2072);const p="tabList_yWYM",u="tabItem_DJsW";function m(e){var t,o;const{lazy:l,block:m,defaultValue:d,values:f,groupId:g,className:h}=e,v=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=f?f:v.map((e=>{let{props:{value:t,label:o,attributes:n}}=e;return{value:t,label:o,attributes:n}})),y=(0,i.l)(b,((e,t)=>e.value===t.value));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const k=null===d?d:null!=(t=null!=d?d:null==(o=v.find((e=>e.props.default)))?void 0:o.props.value)?t:v[0].props.value;if(null!==k&&!b.some((e=>e.value===k)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+b.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:w,setTabGroupChoices:T}=(0,s.U)(),[C,I]=(0,a.useState)(k),N=[],{blockElementScrollPositionUntilNextRender:O}=(0,c.o5)();if(null!=g){const e=w[g];null!=e&&e!==C&&b.some((t=>t.value===e))&&I(e)}const x=e=>{const t=e.currentTarget,o=N.indexOf(t),n=b[o].value;n!==C&&(O(t),I(n),null!=g&&T(g,String(n)))},E=e=>{var t;let o=null;switch(e.key){case"ArrowRight":{var n;const t=N.indexOf(e.currentTarget)+1;o=null!=(n=N[t])?n:N[0];break}case"ArrowLeft":{var a;const t=N.indexOf(e.currentTarget)-1;o=null!=(a=N[t])?a:N[N.length-1];break}}null==(t=o)||t.focus()};return a.createElement("div",{className:(0,r.Z)("tabs-container",p)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":m},h)},b.map((e=>{let{value:t,label:o,attributes:l}=e;return a.createElement("li",(0,n.Z)({role:"tab",tabIndex:C===t?0:-1,"aria-selected":C===t,key:t,ref:e=>N.push(e),onKeyDown:E,onFocus:x,onClick:x},l,{className:(0,r.Z)("tabs__item",u,null==l?void 0:l.className,{"tabs__item--active":C===t})}),null!=o?o:t)}))),l?(0,a.cloneElement)(v.filter((e=>e.props.value===C))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},v.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==C})))))}function d(e){const t=(0,l.Z)();return a.createElement(m,(0,n.Z)({key:String(t)},e))}},1885:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var n=o(4011),a=(o(9231),o(4852)),r=o(2830),l=o(4498);const i={},s="Your first Composite",c={unversionedId:"first-composite",id:"first-composite",title:"Your first Composite",description:"TODO: Quick intro to composites as set of models, focus on usage.",source:"@site/docs/first-composite.mdx",sourceDirName:".",slug:"/first-composite",permalink:"/docs/first-composite",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Installation",permalink:"/docs/installation"},next:{title:"Client setup",permalink:"/docs/client-setup"}},p={},u=[{value:"Importing a Model",id:"importing-a-model",level:2},{value:"Deploying to a local node",id:"deploying-to-a-local-node",level:2},{value:"Configuring Ceramic",id:"configuring-ceramic",level:2},{value:"Interacting using GraphiQL",id:"interacting-using-graphiql",level:2}],m={toc:u};function d(e){let{components:t,...o}=e;return(0,a.kt)("wrapper",(0,n.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"your-first-composite"},"Your first Composite"),(0,a.kt)("p",null,"TODO: Quick intro to composites as set of models, focus on usage."),(0,a.kt)("h2",{id:"importing-a-model"},"Importing a Model"),(0,a.kt)("p",null,"TODO: Model ID and URL of Ceramic node with model stored"),(0,a.kt)(r.Z,{defaultValue:"api",groupId:"api-or-cli",values:[{label:"Using the API",value:"api"},{label:"Using the CLI",value:"cli"}],mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"api",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { CeramicClient } from '@ceramicnetwork/http-client'\nimport { Composite } from '@composedb/devtools'\nimport { writeEncodedComposite } from '@composedb/devtools-node'\n\nconst ceramic = new CeramicClient('https://gateway-clay.ceramic.network')\nconst composite = await Composite.fromModels({ ceramic, models: [''] })\n\nawait writeEncodedComposite(composite, 'my-first-composite.json')\n"))),(0,a.kt)(l.Z,{value:"cli",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"composedb composite:from-model <model ID> --ceramic-url=https://gateway-clay.ceramic.network --output=my-first-composite.json\n")))),(0,a.kt)("h2",{id:"deploying-to-a-local-node"},"Deploying to a local node"),(0,a.kt)("p",null,"The following step requires a local Ceramic node to be running. If you do not already have it running, you can use the following command:"),(0,a.kt)(r.Z,{defaultValue:"pnpm",groupId:"package-manager",values:[{label:"pnpm",value:"pnpm"},{label:"npm",value:"npm"},{label:"Yarn",value:"yarn"}],mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"pnpm",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"pnpm dlx @ceramicnetwork/cli daemon\n"))),(0,a.kt)(l.Z,{value:"npm",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"npx @ceramicnetwork/cli daemon\n"))),(0,a.kt)(l.Z,{value:"yarn",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"yarn dlx @ceramicnetwork/cli daemon\n")))),(0,a.kt)("p",null,"Then the Composite can be deployed from a script or the CLI:"),(0,a.kt)(r.Z,{defaultValue:"api",groupId:"api-or-cli",values:[{label:"Using the API",value:"api"},{label:"Using the CLI",value:"cli"}],mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"api",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { CeramicClient } from '@ceramicnetwork/http-client'\nimport { readEncodedComposite } from '@composedb/devtools-node'\n\n// Replace by the URL of the Ceramic node you want to deploy the Models to\nconst ceramic = new CeramicClient('http://localhost:7007')\n\n// Replace by the path to the local encoded Composite file\nconst composite = await readEncodedComposite(ceramic, 'my-first-composite.json')\n\nconsole.log('Model IDs to set in configuration:', composite.modelIDs)\n"))),(0,a.kt)(l.Z,{value:"cli",mdxType:"TabItem"},(0,a.kt)("p",null,"First, we need to ensure the Models streams are available on the target Ceramic node:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"composedb composite:deploy my-first-composite.json --ceramic-url=http://localhost:7007\n")),(0,a.kt)("p",null,"Then we need to get the list of Models that need to be set for indexing in the Ceramic node configuration:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"composedb composite:models my-first-composite.json\n")))),(0,a.kt)("h2",{id:"configuring-ceramic"},"Configuring Ceramic"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Edit config file to add model ID to index"),(0,a.kt)("li",{parentName:"ul"},"Restart Ceramic node")),(0,a.kt)("h2",{id:"interacting-using-graphiql"},"Interacting using GraphiQL"),(0,a.kt)("p",null,"Once the Composite is deployed and the Ceramic node configured, it is possible to start a local HTTP server to interact with the generated GraphQL schema, notably using GraphiQL:"),(0,a.kt)(r.Z,{defaultValue:"api",groupId:"api-or-cli",values:[{label:"Using the API",value:"api"},{label:"Using the CLI",value:"cli"}],mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"api",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { serveEncodedDefinition } from '@composedb/devtools-node'\n\nconst server = await serveEncodedDefinition({\n  ceramicURL: 'http://localhost:7007',\n  graphiql: true,\n  path: new URL('my-first-composite.json', import.meta.url),\n  port: 5000,\n})\n\nconsole.log(`Server started on ${server.url}`)\n\nprocess.on('SIGTERM', () => {\n  server.close(() => {\n    console.log('Server stopped')\n  })\n})\n"))),(0,a.kt)(l.Z,{value:"cli",mdxType:"TabItem"},(0,a.kt)("p",null,"First, we need to compile the encoded Composite definition to a runtime definition:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"composedb composite:compile my-first-composite.json runtime-composite.json\n")),(0,a.kt)("p",null,"Then we can start the local server with GraphiQL using the runtime composite:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"composedb graphql:server --ceramic-url=http://localhost:7007 --graphiql --port=5000 runtime-composite.json\n")))))}d.isMDXComponent=!0}}]);
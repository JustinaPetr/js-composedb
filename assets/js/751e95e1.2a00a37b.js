"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[863],{4852:(e,o,t)=>{t.d(o,{Zo:()=>m,kt:()=>d});var n=t(9231);function s(e,o,t){return o in e?Object.defineProperty(e,o,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[o]=t,e}function r(e,o){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);o&&(n=n.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var o=1;o<arguments.length;o++){var t=null!=arguments[o]?arguments[o]:{};o%2?r(Object(t),!0).forEach((function(o){s(e,o,t[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(t,o))}))}return e}function i(e,o){if(null==e)return{};var t,n,s=function(e,o){if(null==e)return{};var t,n,s={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],o.indexOf(t)>=0||(s[t]=e[t]);return s}(e,o);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],o.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=n.createContext({}),c=function(e){var o=n.useContext(l),t=o;return e&&(t="function"==typeof e?e(o):a(a({},o),e)),t},m=function(e){var o=c(e.components);return n.createElement(l.Provider,{value:o},e.children)},p={inlineCode:"code",wrapper:function(e){var o=e.children;return n.createElement(n.Fragment,{},o)}},u=n.forwardRef((function(e,o){var t=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=c(t),d=s,g=u["".concat(l,".").concat(d)]||u[d]||p[d]||r;return t?n.createElement(g,a(a({ref:o},m),{},{components:t})):n.createElement(g,a({ref:o},m))}));function d(e,o){var t=arguments,s=o&&o.mdxType;if("string"==typeof e||s){var r=t.length,a=new Array(r);a[0]=u;var i={};for(var l in o)hasOwnProperty.call(o,l)&&(i[l]=o[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,a[1]=i;for(var c=2;c<r;c++)a[c]=t[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},38:(e,o,t)=>{t.d(o,{Z:()=>a});var n=t(9231),s=t(9841);const r="tabItem_TcRf";function a(e){let{children:o,hidden:t,className:a}=e;return n.createElement("div",{role:"tabpanel",className:(0,s.Z)(r,a),hidden:t},o)}},3479:(e,o,t)=>{t.d(o,{Z:()=>d});var n=t(6215),s=t(9231),r=t(9841),a=t(5712),i=t(9782),l=t(8657),c=t(5784);const m="tabList_CCrx",p="tabItem_a0GI";function u(e){var o,t;const{lazy:a,block:u,defaultValue:d,values:g,groupId:f,className:b}=e,v=s.Children.map(e.children,(e=>{if((0,s.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=g?g:v.map((e=>{let{props:{value:o,label:t,attributes:n}}=e;return{value:o,label:t,attributes:n}})),C=(0,i.l)(h,((e,o)=>e.value===o.value));if(C.length>0)throw new Error('Docusaurus error: Duplicate values "'+C.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const y=null===d?d:null!=(o=null!=d?d:null==(t=v.find((e=>e.props.default)))?void 0:t.props.value)?o:v[0].props.value;if(null!==y&&!h.some((e=>e.value===y)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+h.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:w,setTabGroupChoices:k}=(0,l.U)(),[j,E]=(0,s.useState)(y),T=[],{blockElementScrollPositionUntilNextRender:O}=(0,c.o5)();if(null!=f){const e=w[f];null!=e&&e!==j&&h.some((o=>o.value===e))&&E(e)}const x=e=>{const o=e.currentTarget,t=T.indexOf(o),n=h[t].value;n!==j&&(O(o),E(n),null!=f&&k(f,String(n)))},N=e=>{var o;let t=null;switch(e.key){case"ArrowRight":{var n;const o=T.indexOf(e.currentTarget)+1;t=null!=(n=T[o])?n:T[0];break}case"ArrowLeft":{var s;const o=T.indexOf(e.currentTarget)-1;t=null!=(s=T[o])?s:T[T.length-1];break}}null==(o=t)||o.focus()};return s.createElement("div",{className:(0,r.Z)("tabs-container",m)},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":u},b)},h.map((e=>{let{value:o,label:t,attributes:a}=e;return s.createElement("li",(0,n.Z)({role:"tab",tabIndex:j===o?0:-1,"aria-selected":j===o,key:o,ref:e=>T.push(e),onKeyDown:N,onFocus:x,onClick:x},a,{className:(0,r.Z)("tabs__item",p,null==a?void 0:a.className,{"tabs__item--active":j===o})}),null!=t?t:o)}))),a?(0,s.cloneElement)(v.filter((e=>e.props.value===j))[0],{className:"margin-top--md"}):s.createElement("div",{className:"margin-top--md"},v.map(((e,o)=>(0,s.cloneElement)(e,{key:o,hidden:e.props.value!==j})))))}function d(e){const o=(0,a.Z)();return s.createElement(u,(0,n.Z)({key:String(o)},e))}},9569:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>m,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var n=t(6215),s=(t(9231),t(4852)),r=t(3479),a=t(38);const i={},l="Composites customization",c={unversionedId:"guides/using-composites/customization",id:"guides/using-composites/customization",title:"Composites customization",description:"Merging Composites",source:"@site/docs/guides/using-composites/customization.mdx",sourceDirName:"guides/using-composites",slug:"/guides/using-composites/customization",permalink:"/js-composedb/docs/guides/using-composites/customization",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Composites deployment",permalink:"/js-composedb/docs/guides/using-composites/deployment"},next:{title:"Creating Composites",permalink:"/js-composedb/docs/guides/creating-composites"}},m={},p=[{value:"Merging Composites",id:"merging-composites",level:2},{value:"Extracting Models",id:"extracting-models",level:2},{value:"Aliasing Models",id:"aliasing-models",level:2}],u={toc:p};function d(e){let{components:o,...t}=e;return(0,s.kt)("wrapper",(0,n.Z)({},u,t,{components:o,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"composites-customization"},"Composites customization"),(0,s.kt)("h2",{id:"merging-composites"},"Merging Composites"),(0,s.kt)("p",null,"Multiple Composites can be merged together into a single Composite including all the Models from the source Composites."),(0,s.kt)(r.Z,{defaultValue:"api",groupId:"api-or-cli",values:[{label:"Using the API",value:"api"},{label:"Using the CLI",value:"cli"}],mdxType:"Tabs"},(0,s.kt)(a.Z,{value:"api",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { CeramicClient } from '@ceramicnetwork/http-client'\nimport { Composite } from '@composedb/devtools'\nimport { readEncodedComposite, writeEncodedComposite } from '@composedb/devtools-node'\n\nconst ceramic = new CeramicClient('http://localhost:7007')\n\nconst loadSources = [\n  'src/first-composite.json',\n  'src/second-composite.json',\n  'src/third-composite.json',\n].map(async (path) => await readEncodedComposite(ceramic, path))\nconst sourceComposites = await Promise.all(loadSources)\nconst mergedComposite = Composite.from(sourceComposites)\n\nawait writeEncodedComposite(mergedComposite, 'merged-composite.json')\n"))),(0,s.kt)(a.Z,{value:"cli",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},"composedb composite:merge src/first-composite.json src/second-composite.json src/third-composite.json --output=merged-composite.json\n")))),(0,s.kt)("h2",{id:"extracting-models"},"Extracting Models"),(0,s.kt)("p",null,"Composites can contain more Models than useful to a given app. To avoid using unnecessary Models, it is possible to extract only the wanted Models from a given Composite, to create a new Composite."),(0,s.kt)(r.Z,{defaultValue:"api",groupId:"api-or-cli",values:[{label:"Using the API",value:"api"},{label:"Using the CLI",value:"cli"}],mdxType:"Tabs"},(0,s.kt)(a.Z,{value:"api",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { CeramicClient } from '@ceramicnetwork/http-client'\nimport { Composite } from '@composedb/devtools'\nimport { readEncodedComposite, writeEncodedComposite } from '@composedb/devtools-node'\n\nconst ceramic = new CeramicClient('http://localhost:7007')\nconst sourceComposite = await readEncodedComposite(ceramic, 'source-composite.json')\n\nconst newComposite = sourceComposite.copy(['modelID1', 'modelID2'])\nawait writeEncodedComposite(mergedComposite, 'new-composite.json')\n"))),(0,s.kt)(a.Z,{value:"cli",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},"composedb composite:from-model source-composite.json modelID1 modelID2 --output=new-composite.json\n")))),(0,s.kt)("h2",{id:"aliasing-models"},"Aliasing Models"),(0,s.kt)("p",null,"Models can be aliases in a given Composite, so that the GraphQL Schema uses the provided names instead of the ones defined in the Model definition."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { CeramicClient } from '@ceramicnetwork/http-client'\nimport { Composite } from '@composedb/devtools'\nimport { readEncodedComposite, writeEncodedComposite } from '@composedb/devtools-node'\n\nconst sourceComposite = await readEncodedComposite(ceramic, 'source-composite.json')\n\nconst newComposite = sourceComposite.setAliases({\n  'kjz...123': 'SomeName',\n  'kjz...456': 'SomeOtherName',\n})\nawait writeEncodedComposite(newComposite, 'new-composite.json')\n")))}d.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[318],{4852:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(9231);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,v=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(v,i(i({ref:t},p),{},{components:n})):r.createElement(v,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},421:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(4011),o=(n(9231),n(4852));const a={},i="Concepts overview",s={unversionedId:"guides/concepts-overview",id:"guides/concepts-overview",title:"Concepts overview",description:"ComposeDB provides a graph structure for interacting with data on the Ceramic network.",source:"@site/docs/guides/concepts-overview.md",sourceDirName:"guides",slug:"/guides/concepts-overview",permalink:"/docs/guides/concepts-overview",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Client setup",permalink:"/docs/client-setup"},next:{title:"Data composition",permalink:"/docs/guides/data-composition"}},l={},c=[{value:"Nodes",id:"nodes",level:2},{value:"Accounts",id:"accounts",level:2},{value:"Documents",id:"documents",level:2},{value:"Models",id:"models",level:2},{value:"Validation",id:"validation",level:3},{value:"Relations",id:"relations",level:3},{value:"Composites",id:"composites",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"concepts-overview"},"Concepts overview"),(0,o.kt)("p",null,"ComposeDB provides a ",(0,o.kt)("strong",{parentName:"p"},"graph structure")," for interacting with data on the Ceramic network."),(0,o.kt)("p",null,"The ",(0,o.kt)("strong",{parentName:"p"},"nodes")," in the graph can be ",(0,o.kt)("strong",{parentName:"p"},"accounts")," or ",(0,o.kt)("strong",{parentName:"p"},"documents"),", while the ",(0,o.kt)("strong",{parentName:"p"},"edges")," in the graph represent relations between ",(0,o.kt)("strong",{parentName:"p"},"nodes"),"."),(0,o.kt)("p",null,"Currently, ComposeDB only supports edges between an ",(0,o.kt)("strong",{parentName:"p"},"account")," and ",(0,o.kt)("strong",{parentName:"p"},"documents"),", but relations between ",(0,o.kt)("strong",{parentName:"p"},"accounts")," and ",(0,o.kt)("strong",{parentName:"p"},"documents")," are planned on being supported."),(0,o.kt)("h2",{id:"nodes"},"Nodes"),(0,o.kt)("p",null,"All nodes in the graph use a globally unique identifier, allowing direct access to any known node."),(0,o.kt)("p",null,"ComposeDB supports two types of nodes: ",(0,o.kt)("strong",{parentName:"p"},"accounts")," that are able to manipulate data in the graph, and ",(0,o.kt)("strong",{parentName:"p"},"documents")," containing mutable data of a given shape."),(0,o.kt)("h2",{id:"accounts"},"Accounts"),(0,o.kt)("p",null,"TODO: DID"),(0,o.kt)("h2",{id:"documents"},"Documents"),(0,o.kt)("p",null,"TODO: StreamID"),(0,o.kt)("h2",{id:"models"},"Models"),(0,o.kt)("p",null,"Immutable structure and metadata for documents, universally usable."),(0,o.kt)("h3",{id:"validation"},"Validation"),(0,o.kt)("p",null,"Ceramic validation uses JSON schema, ComposeDB abstract it as GraphQL scalars and directives"),(0,o.kt)("h3",{id:"relations"},"Relations"),(0,o.kt)("p",null,"Only account to document(s) at first, single or list options"),(0,o.kt)("h2",{id:"composites"},"Composites"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Mutable set of Models with additional metadata."),(0,o.kt)("li",{parentName:"ul"},"Primary API for managing data models with ComposeDB."),(0,o.kt)("li",{parentName:"ul"},"Can be combined and edited to match applications requirements.")))}u.isMDXComponent=!0}}]);
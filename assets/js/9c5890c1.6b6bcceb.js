"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[421],{4852:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>d});var o=t(9231);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),s=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=s(e.components);return o.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),m=s(t),d=r,g=m["".concat(c,".").concat(d)]||m[d]||u[d]||i;return t?o.createElement(g,l(l({ref:n},p),{},{components:t})):o.createElement(g,l({ref:n},p))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=m;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a.mdxType="string"==typeof e?e:r,l[1]=a;for(var s=2;s<i;s++)l[s]=t[s];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6679:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>s});var o=t(4011),r=(t(9231),t(4852));const i={},l="Using Apollo",a={unversionedId:"guides/interacting/using-apollo",id:"guides/interacting/using-apollo",title:"Using Apollo",description:"The ComposeDB client can be used with the Apollo client by creating a custom Apollo link, as shown in the example below:",source:"@site/docs/guides/interacting/using-apollo.md",sourceDirName:"guides/interacting",slug:"/guides/interacting/using-apollo",permalink:"/js-composedb/docs/guides/interacting/using-apollo",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Performing mutations",permalink:"/js-composedb/docs/guides/interacting/mutations"},next:{title:"Using Relay",permalink:"/js-composedb/docs/guides/interacting/using-relay"}},c={},s=[],p={toc:s};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"using-apollo"},"Using Apollo"),(0,r.kt)("p",null,"The ComposeDB client can be used with the ",(0,r.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/react/api/core/ApolloClient"},"Apollo client")," by creating a custom ",(0,r.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/react/api/link/introduction"},"Apollo link"),", as shown in the example below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { ApolloClient, ApolloLink, InMemoryCache, Observable } from '@apollo/client'\nimport { ComposeClient } from '@composedb/client'\n\n// Path to the generated runtime composite definition\nimport { definition } from './__generated__/definition.js'\n\nconst compose = new ComposeClient({ ceramic: 'http://localhost:7007', definition })\n\n// Create a custom ApolloLink using the ComposeClient instance to execute operations\nconst link = new ApolloLink((operation) => {\n  return new Observable((observer) => {\n    compose.execute(operation.query, operation.variables).then(\n      (result) => {\n        observer.next(result)\n        observer.complete()\n      },\n      (error) => {\n        observer.error(error)\n      }\n    )\n  })\n})\n\n// Use the created ApolloLink instance in your ApolloClient configuration\nexport const client = new ApolloClient({ cache: new InMemoryCache(), link })\n")))}u.isMDXComponent=!0}}]);